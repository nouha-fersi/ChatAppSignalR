@page "/Chat"
@using ChatModels
@using DemoChatApp.Client.ChatServices;
@using DemoChatApp.Client.DTOs
@using DemoChatApp.Client.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveWebAssembly
@inject NavigationManager navigationManager
<PageTitle>Netcode-Hub Chat</PageTitle>

<div class="row">
	<div class="col-lg-7">
		<div class="col-lg-2">
            <div class="card">
                <div class="card-header text-success">Online Users</div>
                <div class="card-body">
                    <ul class="list-group text-success">
                        @if (AvailableUsers != null)
                        {
                            foreach (var u in AvailableUsers)
                            {
                                <li class="list-group-item text-success">@u.Fullname</li>
                            }
                        }
                    </ul>
                </div>

            </div>

			
        </div>
        <div class="card">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    <div class="card-header">Netcode-Hub Chat @context.User.Claims.Where(f => f.Type == ClaimTypes.Name).Last().Value</div>
                </Authorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var chat in Chats)
                    {
                        <li class="list-group-item mb-2">
                            @chat.DateTime.Date.ToString("dd/MMM/yy")
                            <br />
                            <span class="fw-bold">@chat.UserName :</span>
                            <br />
                            @chat.Message
                        </li>
                    }
                </ul>
                <div class="mt-3">
                    <EditForm Model="Chat" OnValidSubmit="SendChat" FormName="ChatForm">
                        <DataAnnotationsValidator />
                        <div class="vstack gap-1">
                            <InputText @bind-Value="Chat.UserName" class="form-control" placeholder="Username"/>
                            <InputText @bind-Value="Chat.Message" class="form-control" placeholder="Message" />
                        </div>
                        <button class="float-end btn btn-success mt-3" type="submit">Send</button>
                    </EditForm>
                </div>
            </div>
            <div class="card-footer fw-bold">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger">Chat Disconnected</div>
                }
                else
                {
                    <div class="alert alert-success">Chat Connected</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    public List<AvailableUserDTO> AvailableUsers { get; set; } = [];

    private Chat Chat = new();
    private HubConnection? _hubConnection;
    public List<Chat> Chats { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<Chat>("ReceiveMessage", (Chat) =>
                {
                    Chats.Add(Chat);
                    InvokeAsync(() => StateHasChanged());
                });


        _hubConnection.On<List<AvailableUserDTO>>("NotifyAllClients", (users) =>
        {
            AvailableUsers = users;
            InvokeAsync(() => StateHasChanged());
        });

        
        await _hubConnection.StartAsync();
        await GetUserAuthentication();
        var httpClient = new HttpClient();
        Chats = await httpClient.GetFromJsonAsync<List<Chat>>("https://localhost:7092/api/chat");
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDTO>>("https://localhost:7092/api/chat/users");
    }

    private async Task GetUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated == true)
        {
            await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUser()
            { UserId = user.Claims.FirstOrDefault (_ =>_.Type == ClaimTypes.NameIdentifier)!.Value });
        }
    }
    
    
    
    public bool IsConnected => _hubConnection!.State == HubConnectionState.Connected;

	public void SendChat() 
	{
		_hubConnection!.SendAsync("SendMessage", Chat);
		Chat.Message = null;
	}
}