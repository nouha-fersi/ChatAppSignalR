@page "/Account/Login"
<h1>Log In</h1>
<div class="row">
	<div class="col-md-4">
		@(message != "" ? message : "")
		<section>
			<EditForm Model="loginModel" Method="post" OnValidSubmit="LoginAsync" FormName="LoginForm">
				<DataAnnotationsValidator />
				<h2>Use a local account to log in</h2>
				<hr />
				<ValidationSummary class="text-danger" role="alert" />

				<!-- Email Input -->
				<div class="form-floating mb-3">
					<InputText id="email" @bind-Value="loginModel.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
					<label for="email" class="form-label">Email</label>
					<ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
				</div>

				<!-- Password Input -->
				<div class="form-floating mb-3">
					<InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
					<label for="password" class="form-label">Password</label>
					<ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
				</div>

				<!-- Submit Button -->
				<div>
					<button type="submit" class="w-100 btn btn-lg btn-primary">Log In</button>
				</div>
			</EditForm>
		</section>
	</div>
</div>




@code {
	string message = "";
	[SupplyParameterFromForm]
	private LoginModel loginModel { get; set; } = new();
	async Task LoginAsync()
	{
		var findUser = await userManager.FindByEmailAsync(loginModel.Email);
		if (findUser == null)
		{
			message = "Sorry, User is not registred";
			return;
		}

		var result = await signInManager.CheckPasswordSignInAsync(findUser, loginModel.Password, false);

		if (!result.Succeeded)
		{
			message = "Sorry, invalid email/password";
			return;
		}

		await signInManager.PasswordSignInAsync(findUser, loginModel.Password, false, false);
		NavManager.NavigateTo("/", true);

	}

	public class LoginModel
	{
		[Required, EmailAddress]
		public string Email { get; set; } = string.Empty;
		[Required]
		public string Password { get; set; } = string.Empty;
	}

}
